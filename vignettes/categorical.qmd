---
format:
  md:
    prefer-html: true
---

# Categorical outcomes


```{r, include = FALSE}
## this vignette is in .Rbuildignore because lme4 is not available on old CRAN
## test machines.

knitr::opts_chunk$set(
  collapse = TRUE,
  fig.width = 9,
  fig.asp = .4,
  out.width = "100%",
  warning = FALSE,
  message = FALSE,
  comment = "#>"
)

library(ggplot2)

theme_clean <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          strip.text = element_text(size = rel(1), hjust = 0),
          strip.background = element_blank(),
          legend.position = "bottom")
}
ggplot2::theme_set(theme_clean())
```

Several packages in the `R` ecosystem allow users to estimate models for ordered or discrete choice, such as ordered probit or multinomial logit. This case study illustrates the use of `marginaleffects` with the `MASS`,  `nnet`, and `mlogit` packages.

We begin by loading two libraries:

```{r, message = FALSE}
library(marginaleffects)
library(tidyverse)
```

## `MASS::polr` function

Consider a simple ordered logit model in which we predict the number of gears of a car based its miles per gallon and horsepower:


```{r}
library(MASS)
mod <- polr(factor(gear) ~ mpg + hp, data = mtcars, Hess = TRUE)
```

Now, consider a car with 25 miles per gallon and 110 horsepower. The expected predicted probability for each outcome level (gear) for this car is:

```{r}
predictions(mod, newdata = datagrid(mpg = 25, hp = 110))
```

Since the `gear` is categorical, we make one prediction for each level of the outcome.

Now consider the marginal effects (aka slopes or partial derivatives) for the same car:

```{r}
slopes(mod, variables = "mpg", newdata = datagrid(mpg = 25, hp = 110))
```

Again, `marginaleffects` produces one estimate of the slope for each outcome level. For a small step size $\varepsilon$, the printed quantities are estimated as:

$$\frac{P(gear=3|mpg=25+\varepsilon, hp=110)-P(gear=3|mpg=25-\varepsilon, hp=110)}{2 \cdot \varepsilon}$$
$$\frac{P(gear=4|mpg=25+\varepsilon, hp=110)-P(gear=4|mpg=25-\varepsilon, hp=110)}{2 \cdot \varepsilon}$$
$$\frac{P(gear=5|mpg=25+\varepsilon, hp=110)-P(gear=5|mpg=25-\varepsilon, hp=110)}{2 \cdot \varepsilon}$$

When we call `avg_slopes()`, `marginaleffects` will repeat the same computation for every row of the original dataset, and then report the average slope for each level of the outcome:

```{r}
avg_slopes(mod)
```

## `nnet` package

The `multinom` function of the `nnet` package allows users to fit log-linear models via neural networks. The `data` used for this function is a data frame with one observation per row, and the response variable is coded a factor. All the `marginaleffects` package function work seamlessly with this model. For example, we can estimate a model and compute average marginal effects as follows:

```{r, message = FALSE}
library(nnet)

head(mtcars)

mod <- multinom(factor(gear) ~ hp + mpg, data = mtcars, trace = FALSE)

avg_slopes(mod, type = "probs")
```

Notice that in such models, we get one marginal effect for each term, for each level of the response variable. For this reason, we should use `"group"` in the `condition` argument (or `facet_*()` function) when calling one of the plotting functions:

```{r}
library(ggplot2)

plot_predictions(mod, condition = c("mpg", "group"), type = "probs")

plot_predictions(mod, condition = "mpg", type = "probs") + facet_wrap(~group)

plot_comparisons(
    mod,
    variables = list(mpg = c(15, 30)),
    condition = "group",
    type = "probs")
```

## `mlogit` package

The `mlogit` package uses `data` in a slightly different structure, with one row per observation-choice combination. For example, this data on choice of travel mode includes 4 rows per individual, one for each mode of transportation:

```{r, message = FALSE}
library("AER")
library("mlogit")
library("tidyverse")
data("TravelMode", package = "AER")

head(TravelMode)

mod <- mlogit(choice ~ wait + gcost | income + size, TravelMode)

avg_slopes(mod, variables = c("income", "size"))
```

Note that the `slopes` function will always return estimates of zero for regressors before the vertical bar in the formula. This is because `marginaleffects` increments all rows of the prediction dataset in the same way to compute slopes and contrast. Because `mlogit` data are in "long" format, this means that alternatives are incremented in the same way, which does not produce alternative-specific changes in the predictors.

One strategy to circumvent this problem is to supply a data frame of numeric values to compare, with alternative specific changes. In this example, we test what happens to the probability of selecting each mode of transportation if we only increase the wait time of air travel:

```{r}
altspec <- data.frame(
  low = TravelMode$wait,
  high = ifelse(TravelMode$mode == "air", TravelMode$wait + 15, TravelMode$wait)
)

avg_comparisons(mod, variables = list(wait = altspec))
```

We can compute yet more kinds of marginal effects, we can construct customized data frames and feed them to the `newdata` argument of the `slopes` function. 

If we want to compute the slope of the response function (marginal effects) when each of the predictors is fixed to its global mean, we can do:

```{r}
nd <- TravelMode |>
    summarize(across(c("wait", "gcost", "income", "size"),
              function(x) rep(mean(x), 4)))
nd

avg_slopes(mod, newdata = nd, variables = c("income", "size"))
```

If we want to compute marginal effects with the `gcost` and `wait` fixed at their mean value, *conditional* on the choice of transportation mode:

```{r}
nd <- TravelMode |>
    group_by(mode) |>
    summarize(across(c("wait", "gcost", "income", "size"), mean))
nd

avg_slopes(mod, newdata = nd, variables = c("income", "size"))
```

We can also explore more complex alternatives. Here, for example, only one alternative is affected by cost reduction:

```{r}
nd <- datagrid(mode = TravelMode$mode, newdata = TravelMode)
nd <- lapply(1:4, function(i) mutate(nd, gcost = ifelse(1:4 == i, 30, gcost)))
nd <- bind_rows(nd)
nd

avg_slopes(mod, newdata = nd, variables = c("income", "size"))
```

**Important:** The `newdata` argument for `mlogit` models must be a "balanced" data frame, that is, it must have a number of rows that is a multiple of the number of choices.
