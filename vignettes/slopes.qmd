---
format:
  md:
    prefer-html: true
---

# Slopes 


```{r, include = FALSE}
options(width = 1000)
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.width = 6,
  fig.asp = .4,
  warning = FALSE,
  message = FALSE,
  comment = "#>"
)

library(marginaleffects)
library(patchwork)
library(ggplot2)
library(knitr)

theme_set(theme_minimal())
```

## Definition

Slopes are defined as:

> Partial derivatives of the regression equation with respect to a regressor of interest. a.k.a. Marginal effects, trends.

This vignette follows the econometrics tradition by referring to "slopes" and "marginal effects" interchangeably. In this context, the word "marginal" refers to the idea of a "small change," in the calculus sense.

A marginal effect measures the association between a change in a regressor $x$, and a change in the response $y$. Put differently, differently, the marginal effect is the slope of the prediction function, measured at a specific value of the regressor $x$.

Marginal effects are extremely useful, because they are intuitive and easy to interpret. They are often the main quantity of interest in an empirical analysis.

In scientific practice, the "Marginal Effect" falls in the same toolbox as the ["Contrast."](comparisons.html) Both try to answer a counterfactual question: What would happen to $y$ if $x$ were different? They allow us to model the "effect" of a change/difference in the regressor $x$ on the response $y$.[^slopes-1]

[^slopes-1]: The term "effect" is itself tricky. To be clear, this vignette does *not* use the word "effect" to imply "causality".

To illustrate the concept, consider this quadratic function:

$$y = -x^2$$

From the definition above, we know that the marginal effect is the partial derivative of $y$ with respect to $x$:

$$\frac{\partial y}{\partial x} = -2x$$

To get intuition about how to interpret this quantity, consider the response of $y$ to $x$. It looks like this:

```{r, echo=FALSE}
x <- seq(-4, 4, .01)
y <- -x^2 
dat <- data.frame(x, y)
ggplot(dat, aes(x, y)) + 
    geom_line() +
    labs(y = "Response") +
    xlim(c(-4, 4)) +
    ylim(c(-7, 0.5))
```

When $x$ increases, $y$ starts to increase. But then, as $x$ increases further, $y$ creeps back down in negative territory.

A marginal effect is the slope of this response function at a certain value of $x$. The next plot adds three tangent lines, highlighting the slopes of the response function for three values of $x$. The slopes of these tangents tell us three things:

1.  When $x<0$, the slope is positive: an increase in $x$ is associated with an increase in $y$: The marginal effect is positive.
2.  When $x=0$, the slope is null: a (small) change in $x$ is associated with no change in $y$. The marginal effect is null.
3.  When $x>0$, the slope is negative: an increase in $x$ is associated with a decrease in $y$. The marginal effect is negative.

```{r, echo=FALSE}
p1 <- ggplot(dat, aes(x, y)) + 
      xlim(c(-4, 4)) +
      ylim(c(-7, 0.5)) +
      labs(y = "Response") +
      geom_abline(slope = 4, intercept = 4, color = "orange", linetype = "dashed") +
      geom_abline(slope = 0, intercept = 0, color = "orange", linetype = "dashed") +
      geom_abline(slope = -4, intercept = 4, color = "orange", linetype = "dashed") +
      geom_line() +
      annotate("point", x = -2, y = -4, colour = "orange") +
      annotate("point", x = 0, y = 0, colour = "orange") +
      annotate("point", x = 2, y = -4, colour = "orange")
p1
```

Below, we show how to reach the same conclusions in an estimation context, with simulated data and the `slopes` function.

## `slopes` function

The marginal effect is a *unit-level* measure of association between changes in a regressor and changes in the response. Except in the simplest linear models, the value of the marginal effect will be different from individual to individual, because it will depend on the values of the other covariates for each individual.

The `slopes` function thus produces distinct estimates of the marginal effect for each row of the data used to fit the model. The output of `marginaleffects` is a simple `data.frame`, which can be inspected with all the usual `R` commands.

To show this, we load the library, download the [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/), and estimate a GLM model:

```{r}
library(marginaleffects)

dat <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv")
dat$large_penguin <- ifelse(dat$body_mass_g > median(dat$body_mass_g, na.rm = TRUE), 1, 0)

mod <- glm(large_penguin ~ bill_length_mm + flipper_length_mm + species,
           data = dat, family = binomial)
```

```{r}
mfx <- slopes(mod)
head(mfx)
```

## The Marginal Effects Zoo

A dataset with one marginal effect estimate per unit of observation is a bit unwieldy and difficult to interpret. There are ways to make this information easier to digest, by computing various quantities of interest. [In a characteristically excellent blog post,](https://www.andrewheiss.com/blog/2022/05/20/marginalia/) Professor Andrew Heiss introduces many such quantities:

-   Average Marginal Effects
-   Group-Average Marginal Effects
-   Marginal Effects at User-Specified Values (or Representative Values)
-   Marginal Effects at the Mean
-   Counterfactual Marginal Effects
-   Conditional Marginal Effects

The rest of this vignette defines each of those quantities and explains how to use the `slopes()` and `plot_slopes()` functions to compute them. The main differences between these quantities pertain to (a) the regressor values at which we estimate marginal effects, and (b) the way in which unit-level marginal effects are aggregated.

Heiss drew this exceedingly helpful graph which summarizes the information in the rest of this vignette:

![](fig/heiss_mfx.png)

### Average Marginal Effect (AME)

A dataset with one marginal effect estimate per unit of observation is a bit unwieldy and difficult to interpret. Many analysts like to report the "Average Marginal Effect", that is, the average of all the observation-specific marginal effects. These are easy to compute based on the full `data.frame` shown above, but the `avg_slopes()` function is convenient:

```{r}
avg_slopes(mod)
```

Note that since marginal effects are derivatives, they are only properly defined for continuous numeric variables. When the model also includes categorical regressors, the `summary` function will try to display relevant (regression-adjusted) contrasts between different categories, as shown above.

You can also extract average marginal effects using `tidy` and `glance` methods which conform to the [`broom` package specification](https://broom.tidymodels.org/):

```{r}
tidy(mfx)

glance(mfx)
```

### Group-Average Marginal Effect (G-AME)

We can also use the `by` argument the average marginal effects *within different subgroups* of the observed data, based on values of the regressors. For example, to compute the average marginal effects of Bill Length for each Species, we do:

```{r}
avg_slopes(
  mod,
  by = "species",
  variables = "bill_length_mm")
```

This is equivalent to manually taking the mean of the observation-level marginal effect for each species sub-group:

```{r}
aggregate(
  mfx$estimate,
  by = list(mfx$species, mfx$term),
  FUN = mean)
```

Note that `marginaleffects` follows `Stata` and the `margins` package in computing standard errors using the group-wise averaged Jacobian.

### Marginal Effect at User-Specified Values

Sometimes, we are not interested in *all* the unit-specific marginal effects, but would rather look at the estimated marginal effects for certain "typical" individuals, or for user-specified values of the regressors. The `datagrid` function helps us build a data grid full of "typical" rows. For example, to generate artificial Adelies and Gentoos with 180mm flippers:

```{r}
datagrid(flipper_length_mm = 180,
         species = c("Adelie", "Gentoo"),
         model = mod)
```

The same command can be used (omitting the `model` argument) to `marginaleffects`'s `newdata` argument to compute marginal effects for those (fictional) individuals:

```{r}
slopes(
  mod,
  newdata = datagrid(
    flipper_length_mm = 180,
    species = c("Adelie", "Gentoo")))
```

When variables are omitted from the `datagrid` call, they will automatically be set at their mean or mode (depending on variable type).

### Marginal Effect at the Mean (MEM)

The "Marginal Effect at the Mean" is a marginal effect calculated for a hypothetical observation where each regressor is set at its mean or mode. By default, the `datagrid` function that we used in the previous section sets all regressors to their means or modes. To calculate the MEM, we can set the `newdata` argument, which determines the values of predictors at which we want to compute marginal effects:

```{r}
slopes(mod, newdata = "mean")
```

### Counterfactual Marginal Effects

The `datagrid` function allowed us look at completely fictional individuals. Setting the `grid_type` argument of this function to `"counterfactual"` lets us compute the marginal effects for the actual observations in our dataset, but with a few manipulated values. For example, this code will create a `data.frame` twice as long as the original `dat`, where each observation is repeated with different values of the `flipper_length_mm` variable:

```{r}
nd <- datagrid(flipper_length_mm = c(160, 180),
               model = mod,
               grid_type = "counterfactual")
```

We see that the rows 1, 2, and 3 of the original dataset have been replicated twice, with different values of the `flipper_length_mm` variable:

```{r}
nd[nd$rowid %in% 1:3,]
```

We can use the observation-level marginal effects to compute average (or median, or anything else) marginal effects over the counterfactual individuals:

```{r, message=FALSE, warning=FALSE}
library(dplyr)

slopes(mod, newdata = nd) |>
    group_by(term) |>
    summarize(estimate = median(estimate))
```

### Conditional Marginal Effects (Plot)

The `plot_slopes` function can be used to draw "Conditional Marginal Effects." This is useful when a model includes interaction terms and we want to plot how the marginal effect of a variable changes as the value of a "condition" (or "moderator") variable changes:

```{r, out.width = "60%"}
mod <- lm(mpg ~ hp * wt + drat, data = mtcars)

plot_slopes(mod, variables = "hp", condition = "wt")
```

The marginal effects in the plot above were computed with values of all regressors -- except the `variables` and the `condition` -- held at their means or modes, depending on variable type.

Since `plot_slopes()` produces a `ggplot2` object, it is easy to customize. For example:

```{r}
plot_slopes(mod, variables = "hp", condition = "wt") +
    geom_rug(aes(x = wt), data = mtcars) +
    theme_classic()
```

## Example: Quadratic

In the "Definition" section of this vignette, we considered how marginal effects can be computed analytically in a simple quadratic equation context. We can now use the `slopes` function to replicate our analysis of the quadratic function in a regression application.

Say you estimate a linear regression model with a quadratic term:

$$Y = \beta_0 + \beta_1 X^2 + \varepsilon$$

and obtain estimates of $\beta_0=1$ and $\beta_1=2$. Taking the partial derivative with respect to $X$ and plugging in our estimates gives us the marginal effect of $X$ on $Y$:

$$\partial Y / \partial X = \beta_0 + 2 \cdot \beta_1 X$$ $$\partial Y / \partial X = 1 + 4X$$

This result suggests that the effect of a *change* in $X$ on $Y$ depends on the *level* of $X$. When $X$ is large and positive, an increase in $X$ is associated to a large increase in $Y$. When $X$ is small and positive, an increase in $X$ is associated to a small increase in $Y$. When $X$ is a large negative value, an increase in $X$ is associated with a *decrease* in $Y$.

`marginaleffects` arrives at the same conclusion in simulated data:

```{r, message = FALSE}
library(tidyverse)
N <- 1e5
quad <- data.frame(x = rnorm(N))
quad$y <- 1 + 1 * quad$x + 2 * quad$x^2 + rnorm(N)
mod <- lm(y ~ x + I(x^2), quad)

slopes(mod, newdata = datagrid(x = -2:2))  |>
    mutate(truth = 1 + 4 * x) |>
    select(estimate, truth)
```

We can plot conditional adjusted predictions with `plot_predictions` function:

```{r}
plot_predictions(mod, condition = "x")
```

We can plot conditional marginal effects with the `plot_slopes` function (see section below):

```{r}
plot_slopes(mod, variables = "x", condition = "x")
```

Again, the conclusion is the same. When $x<0$, an increase in $x$ is associated with an decrease in $y$. When $x>1/4$, the marginal effect is positive, which suggests that an increase in $x$ is associated with an increase in $y$.

## Slopes vs Predictions: A Visual Interpretation

Often, analysts will plot predicted values of the outcome with a best fit line:

```{r}
library(ggplot2)

mod <- lm(mpg ~ hp * qsec, data = mtcars)

plot_predictions(mod, condition = "hp", vcov = TRUE) +
  geom_point(data = mtcars, aes(hp, mpg)) 
```

The slope of this line is calculated using the same technique we all learned in grade school: dividing rise over run.

```{r}
p <- plot_predictions(mod, condition = "hp", vcov = TRUE, draw = FALSE)
plot_predictions(mod, condition = "hp", vcov = TRUE) +
  geom_segment(aes(x = p$hp[10], xend = p$hp[10], y = p$estimate[10], yend = p$estimate[20])) +
  geom_segment(aes(x = p$hp[10], xend = p$hp[20], y = p$estimate[20], yend = p$estimate[20])) +
  annotate("text", label = "Rise", y = 10, x = 140) +
  annotate("text", label = "Run", y = 2, x = 200)
```

Instead of computing this slope manually, we can just call:

```{r}
avg_slopes(mod, variables = "hp")
```

Now, consider the fact that our model includes an interaction between `hp` and `qsec`. This means that the slope will actually differ based on the value of the moderator variable `qsec`:

```{r}
plot_predictions(mod, condition = list("hp", "qsec" = "quartile"))
```

We can estimate the slopes of these three fit lines easily:

```{r}
slopes(
  mod,
  variables = "hp",
  newdata = datagrid(qsec = quantile(mtcars$qsec, probs = c(.25, .5, .75))))
```

As we see in the graph, all three slopes are negative, but the Q3 slope is steepest.

We could then push this one step further, and measure the slope of `mpg` with respect to `hp`, *for all observed values* of `qsec`. This is achieved with the `plot_slopes()` function:

```{r}
plot_slopes(mod, variables = "hp", condition = "qsec") +
  geom_hline(yintercept = 0, linetype = 3)
```

This plot shows that the marginal effect of `hp` on `mpg` is always negative (the slope is always below zero), and that this effect becomes even more negative as `qsec` increases.

## Prediction types

The `marginaleffect` function takes the derivative of the fitted (or predicted) values of the model, as is typically generated by the `predict(model)` function. By default, `predict` produces predictions on the `"response"` scale, so the marginal effects should be interpreted on that scale. However, users can pass a string or a vector of strings to the `type` argument, and `marginaleffects` will consider different outcomes.

Typical values include `"response"` and `"link"`, but users should refer to the documentation of the `predict` of the package they used to fit the model to know what values are allowable. documentation.

```{r}
mod <- glm(am ~ mpg, family = binomial, data = mtcars)
avg_slopes(mod, type = "response")

avg_slopes(mod, type = "link")
```


## Minimum or maximum slope (velocity)

In some fields such as epidemiology, it is common to compute the minimum or maximum slope, as a measure of the "velocity" of the response function. To achieve this, we can use the `comparisons()` function and define custom functions. Here, we present a quick example without much detail, but you can refer to [the comparisons vignette](comparisons.html) for more explanations on custom functions in the `comparison` argument.

Consider this simple GAM model:

```{r, message=FALSE}
library(marginaleffects)
library(itsadug)
library(mgcv)

simdat$Subject <- as.factor(simdat$Subject)
model <- bam(Y ~ Group + s(Time, by = Group) + s(Subject, bs = "re"),
             data = simdat)

plot_slopes(model, variables = "Time", condition = c("Time", "Group"))
```

Minimum velocity, overall:

```{r}
comparisons(model,
  variables = list("Time" = 1e-6),
  vcov = FALSE,
  comparison = \(hi, lo) min((hi - lo) / 1e-6))
```

Minimum velocity by group:

```{r}
comparisons(model,
  variables = list("Time" = 1e-6),
  by = "Group",
  vcov = FALSE,
  comparison = \(hi, lo) min((hi - lo) / 1e-6))
```

Difference between the minimum velocity of each group:

```{r}
comparisons(model,
  variables = list("Time" = 1e-6),
  vcov = FALSE,
  by = "Group",
  hypothesis = "pairwise",
  comparison = \(hi, lo) min((hi - lo) / 1e-6))
```

What `Time` value corresponds to the minimum velocity?

```{r}
low = function(hi, lo, x) {
    dydx <- (hi - lo) / 1e-6
    dydx_min <- min(dydx)
    x[dydx == dydx_min][1]
}

comparisons(model,
  variables = list("Time" = 1e-6),
  vcov = FALSE,
  by = "Group",
  comparison = low)
```

## Manual computation

Now we illustrate how to reproduce the output of `slopes` manually:

```{r}
library(marginaleffects)

mod <- glm(am ~ hp, family = binomial, data = mtcars)

eps <- 1e-4
d1 <- transform(mtcars, hp = hp - eps / 2)
d2 <- transform(mtcars, hp = hp + eps / 2)
p1 <- predict(mod, type = "response", newdata = d1)
p2 <- predict(mod, type = "response", newdata = d2)
s <- (p2 - p1) / eps
tail(s)
```

Which is equivalent to:

```{r}
slopes(mod, eps = eps) |> tail()
```

And we can get average marginal effects by subgroup as follows:


```{r}
tapply(s, mtcars$cyl, mean)

slopes(mod, eps = eps, by = "cyl")
```
