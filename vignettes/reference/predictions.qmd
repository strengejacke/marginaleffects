# predictions {.unnumbered}

Predictions

## Description

<p>Outcome predicted by a fitted model on a specified scale for a given combination of values of the predictor variables, such as their observed values, their means, or factor levels (a.k.a. &quot;reference grid&quot;).
</p>

<ul>
<li> <p><code>predictions()</code>: unit-level (conditional) estimates.
</p>
</li>
<li> <p><code>avg_predictions()</code>: average (marginal) estimates.
</p>
</li></ul>

<p>The <code>newdata</code> argument and the <code>datagrid()</code> function can be used to control where statistics are evaluated in the predictor space: &quot;at observed values&quot;, &quot;at the mean&quot;, &quot;at representative values&quot;, etc.
</p>
<p>See the predictions vignette and package website for worked examples and case studies:
</p>

<ul>
<li> <p><a href="https://marginaleffects.com/vignettes/predictions.html">https://marginaleffects.com/vignettes/predictions.html</a>
</p>
</li>
<li> <p><a href="https://marginaleffects.com/">https://marginaleffects.com/</a>
</p>
</li></ul>



## Usage

<pre><code class='language-R'>predictions(
  model,
  newdata = NULL,
  variables = NULL,
  vcov = TRUE,
  conf_level = 0.95,
  type = NULL,
  by = FALSE,
  byfun = NULL,
  wts = NULL,
  transform = NULL,
  hypothesis = NULL,
  equivalence = NULL,
  p_adjust = NULL,
  df = Inf,
  numderiv = "fdforward",
  ...
)

avg_predictions(
  model,
  newdata = NULL,
  variables = NULL,
  vcov = TRUE,
  conf_level = 0.95,
  type = NULL,
  by = TRUE,
  byfun = NULL,
  wts = NULL,
  transform = NULL,
  hypothesis = NULL,
  equivalence = NULL,
  p_adjust = NULL,
  df = Inf,
  numderiv = "fdforward",
  ...
)
</code></pre>


## Arguments

<table>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>model</code></td>
<td>
<p>Model object</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>newdata</code></td>
<td>
<p>Grid of predictor values at which we evaluate predictions.
</p>

<ul>
<li><p> Warning: Please avoid modifying your dataset between fitting the model and calling a <code>marginaleffects</code> function. This can sometimes lead to unexpected results.
</p>
</li>
<li> <p><code>NULL</code> (default): Unit-level predictions for each observed value in the dataset (empirical distribution). The dataset is retrieved using <code>insight::get_data()</code>, which tries to extract data from the environment. This may produce unexpected results if the original data frame has been altered since fitting the model.
</p>
</li>
<li><p> string:
</p>

<ul>
<li><p> &quot;mean&quot;: Predictions at the Mean. Predictions when each predictor is held at its mean or mode.
</p>
</li>
<li><p> &quot;median&quot;: Predictions at the Median. Predictions when each predictor is held at its median or mode.
</p>
</li>
<li><p> &quot;marginalmeans&quot;: Predictions at Marginal Means. See Details section below.
</p>
</li>
<li><p> &quot;tukey&quot;: Predictions at Tukey's 5 numbers.
</p>
</li>
<li><p> &quot;grid&quot;: Predictions on a grid of representative numbers (Tukey's 5 numbers and unique values of categorical predictors).
</p>
</li></ul>

</li>
<li> <p><code>datagrid()</code> call to specify a custom grid of regressors. For example:
</p>

<ul>
<li> <p><code>newdata = datagrid(cyl = c(4, 6))</code>: <code>cyl</code> variable equal to 4 and 6 and other regressors fixed at their means or modes.
</p>
</li>
<li><p> See the Examples section and the <code>datagrid()</code> documentation.
</p>
</li></ul>

</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>variables</code></td>
<td>
<p>Counterfactual variables.
</p>

<ul>
<li><p> Output:
</p>

<ul>
<li> <p><code>predictions()</code>: The entire dataset is replicated once for each unique combination of <code>variables</code>, and predictions are made.
</p>
</li>
<li> <p><code>avg_predictions()</code>: The entire dataset is replicated, predictions are made, and they are marginalized by <code>variables</code> categories.
</p>
</li>
<li><p> Warning: This can be expensive in large datasets.
</p>
</li>
<li><p> Warning: Users who need &quot;conditional&quot; predictions should use the <code>newdata</code> argument instead of <code>variables</code>.
</p>
</li></ul>

</li>
<li><p> Input:
</p>

<ul>
<li> <p><code>NULL</code>: computes one prediction per row of <code>newdata</code>
</p>
</li>
<li><p> Character vector: the dataset is replicated once of every combination of unique values of the variables identified in <code>variables</code>.
</p>
</li>
<li><p> Named list: names identify the subset of variables of interest and their values. For numeric variables, the <code>variables</code> argument supports functions and string shortcuts:
</p>

<ul>
<li><p> A function which returns a numeric value
</p>
</li>
<li><p> Numeric vector: Contrast between the 2nd element and the 1st element of the <code>x</code> vector.
</p>
</li>
<li><p> &quot;iqr&quot;: Contrast across the interquartile range of the regressor.
</p>
</li>
<li><p> &quot;sd&quot;: Contrast across one standard deviation around the regressor mean.
</p>
</li>
<li><p> &quot;2sd&quot;: Contrast across two standard deviations around the regressor mean.
</p>
</li>
<li><p> &quot;minmax&quot;: Contrast between the maximum and the minimum values of the regressor.
</p>
</li>
<li><p> &quot;threenum&quot;: mean and 1 standard deviation on both sides
</p>
</li>
<li><p> &quot;fivenum&quot;: Tukey's five numbers
</p>
</li></ul>

</li></ul>

</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>vcov</code></td>
<td>
<p>Type of uncertainty estimates to report (e.g., for robust standard errors). Acceptable values:
</p>

<ul>
<li><p> FALSE: Do not compute standard errors. This can speed up computation considerably.
</p>
</li>
<li><p> TRUE: Unit-level standard errors using the default <code>vcov(model)</code> variance-covariance matrix.
</p>
</li>
<li><p> String which indicates the kind of uncertainty estimates to return.
</p>

<ul>
<li><p> Heteroskedasticity-consistent: <code>"HC"</code>, <code>"HC0"</code>, <code>"HC1"</code>, <code>"HC2"</code>, <code>"HC3"</code>, <code>"HC4"</code>, <code>"HC4m"</code>, <code>"HC5"</code>. See <code>?sandwich::vcovHC</code>
</p>
</li>
<li><p> Heteroskedasticity and autocorrelation consistent: <code>"HAC"</code>
</p>
</li>
<li><p> Mixed-Models degrees of freedom: &quot;satterthwaite&quot;, &quot;kenward-roger&quot;
</p>
</li>
<li><p> Other: <code>"NeweyWest"</code>, <code>"KernHAC"</code>, <code>"OPG"</code>. See the <code>sandwich</code> package documentation.
</p>
</li></ul>

</li>
<li><p> One-sided formula which indicates the name of cluster variables (e.g., <code>~unit_id</code>). This formula is passed to the <code>cluster</code> argument of the <code>sandwich::vcovCL</code> function.
</p>
</li>
<li><p> Square covariance matrix
</p>
</li>
<li><p> Function which returns a covariance matrix (e.g., <code>stats::vcov(model)</code>)
</p>
</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>conf_level</code></td>
<td>
<p>numeric value between 0 and 1. Confidence level to use to build a confidence interval.</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>type</code></td>
<td>
<p>string indicates the type (scale) of the predictions used to
compute contrasts or slopes. This can differ based on the model
type, but will typically be a string such as: &quot;response&quot;, &quot;link&quot;, &quot;probs&quot;,
or &quot;zero&quot;. When an unsupported string is entered, the model-specific list of
acceptable values is returned in an error message. When <code>type</code> is <code>NULL</code>, the
first entry in the error message is used by default.</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>by</code></td>
<td>
<p>Aggregate unit-level estimates (aka, marginalize, average over). Valid inputs:
</p>

<ul>
<li> <p><code>FALSE</code>: return the original unit-level estimates.
</p>
</li>
<li> <p><code>TRUE</code>: aggregate estimates for each term.
</p>
</li>
<li><p> Character vector of column names in <code>newdata</code> or in the data frame produced by calling the function without the <code>by</code> argument.
</p>
</li>
<li><p> Data frame with a <code>by</code> column of group labels, and merging columns shared by <code>newdata</code> or the data frame produced by calling the same function without the <code>by</code> argument.
</p>
</li>
<li><p> See examples below.
</p>
</li>
<li><p> For more complex aggregations, you can use the <code>FUN</code> argument of the <code>hypotheses()</code> function. See that function's documentation and the Hypothesis Test vignettes on the <code>marginaleffects</code> website.
</p>
</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>byfun</code></td>
<td>
<p>A function such as <code>mean()</code> or <code>sum()</code> used to aggregate
estimates within the subgroups defined by the <code>by</code> argument. <code>NULL</code> uses the
<code>mean()</code> function. Must accept a numeric vector and return a single numeric
value. This is sometimes used to take the sum or mean of predicted
probabilities across outcome or predictor
levels. See examples section.</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>wts</code></td>
<td>
<p>string or numeric: weights to use when computing average contrasts or slopes. These weights only affect the averaging in <code style="white-space: pre;">&#8288;avg_*()&#8288;</code> or with the <code>by</code> argument, and not the unit-level estimates themselves. Internally, estimates and weights are passed to the <code>weighted.mean()</code> function.
</p>

<ul>
<li><p> string: column name of the weights variable in <code>newdata</code>. When supplying a column name to <code>wts</code>, it is recommended to supply the original data (including the weights variable) explicitly to <code>newdata</code>.
</p>
</li>
<li><p> numeric: vector of length equal to the number of rows in the original data or in <code>newdata</code> (if supplied).
</p>
</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>transform</code></td>
<td>
<p>A function applied to unit-level adjusted predictions and confidence intervals just before the function returns results. For bayesian models, this function is applied to individual draws from the posterior distribution, before computing summaries.</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>hypothesis</code></td>
<td>
<p>specify a hypothesis test or custom contrast using a numeric value, vector, or matrix, a string, or a string formula.
</p>

<ul>
<li><p> Numeric:
</p>

<ul>
<li><p> Single value: the null hypothesis used in the computation of Z and p (before applying <code>transform</code>).
</p>
</li>
<li><p> Vector: Weights to compute a linear combination of (custom contrast between) estimates. Length equal to the number of rows generated by the same function call, but without the <code>hypothesis</code> argument.
</p>
</li>
<li><p> Matrix: Each column is a vector of weights, as describe above, used to compute a distinct linear combination of (contrast between) estimates. The column names of the matrix are used as labels in the output.
</p>
</li></ul>

</li>
<li><p> String formula to specify linear or non-linear hypothesis tests. If the <code>term</code> column uniquely identifies rows, terms can be used in the formula. Otherwise, use <code>b1</code>, <code>b2</code>, etc. to identify the position of each parameter. The <code style="white-space: pre;">&#8288;b*&#8288;</code> wildcard can be used to test hypotheses on all estimates. Examples:
</p>

<ul>
<li> <p><code>hp = drat</code>
</p>
</li>
<li> <p><code>hp + drat = 12</code>
</p>
</li>
<li> <p><code>b1 + b2 + b3 = 0</code>
</p>
</li>
<li> <p><code style="white-space: pre;">&#8288;b* / b1 = 1&#8288;</code>
</p>
</li></ul>

</li>
<li><p> String:
</p>

<ul>
<li><p> &quot;pairwise&quot;: pairwise differences between estimates in each row.
</p>
</li>
<li><p> &quot;reference&quot;: differences between the estimates in each row and the estimate in the first row.
</p>
</li>
<li><p> &quot;sequential&quot;: difference between an estimate and the estimate in the next row.
</p>
</li>
<li><p> &quot;revpairwise&quot;, &quot;revreference&quot;, &quot;revsequential&quot;: inverse of the corresponding hypotheses, as described above.
</p>
</li></ul>

</li>
<li><p> See the Examples section below and the vignette: https://marginaleffects.com/vignettes/hypothesis.html
</p>
</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>equivalence</code></td>
<td>
<p>Numeric vector of length 2: bounds used for the two-one-sided test (TOST) of equivalence, and for the non-inferiority and non-superiority tests. See Details section below.</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>p_adjust</code></td>
<td>
<p>Adjust p-values for multiple comparisons: &quot;holm&quot;, &quot;hochberg&quot;, &quot;hommel&quot;, &quot;bonferroni&quot;, &quot;BH&quot;, &quot;BY&quot;, or &quot;fdr&quot;. See stats::p.adjust</p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>df</code></td>
<td>
<p>Degrees of freedom used to compute p values and confidence intervals. A single numeric value between 1 and <code>Inf</code>. When <code>df</code> is <code>Inf</code>, the normal distribution is used. When <code>df</code> is finite, the <code>t</code> distribution is used. See insight::get_df for a convenient function to extract degrees of freedom. Ex: <code>slopes(model, df = insight::get_df(model))</code></p>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>numderiv</code></td>
<td>
<p>string or list of strings indicating the method to use to for the numeric differentiation used in to compute delta method standard errors.
</p>

<ul>
<li><p> &quot;fdforward&quot;: finite difference method with forward differences
</p>
</li>
<li><p> &quot;fdcenter&quot;: finite difference method with central differences (default)
</p>
</li>
<li><p> &quot;richardson&quot;: Richardson extrapolation method
</p>
</li>
<li><p> Extra arguments can be specified by passing a list to the <code>numDeriv</code> argument, with the name of the method first and named arguments following, ex: <code>numderiv=list("fdcenter", eps = 1e-5)</code>. When an unknown argument is used, <code>marginaleffects</code> prints the list of valid arguments for each method.
</p>
</li></ul>
</td></tr>
<tr style="vertical-align: top;"><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code>...</code></td>
<td>
<p>Additional arguments are passed to the <code>predict()</code> method
supplied by the modeling package.These arguments are particularly useful
for mixed-effects or bayesian models (see the online vignettes on the
<code>marginaleffects</code> website). Available arguments can vary from model to
model, depending on the range of supported arguments by each modeling
package. See the &quot;Model-Specific Arguments&quot; section of the
<code>?marginaleffects</code> documentation for a non-exhaustive list of available
arguments.</p>
</td></tr>
</table>


## Value

<p>A <code>data.frame</code> with one row per observation and several columns:
</p>

<ul>
<li> <p><code>rowid</code>: row number of the <code>newdata</code> data frame
</p>
</li>
<li> <p><code>type</code>: prediction type, as defined by the <code>type</code> argument
</p>
</li>
<li> <p><code>group</code>: (optional) value of the grouped outcome (e.g., categorical outcome models)
</p>
</li>
<li> <p><code>estimate</code>: predicted outcome
</p>
</li>
<li> <p><code>std.error</code>: standard errors computed using the delta method.
</p>
</li>
<li> <p><code>p.value</code>: p value associated to the <code>estimate</code> column. The null is determined by the <code>hypothesis</code> argument (0 by default), and p values are computed before applying the <code>transform</code> argument. For models of class <code>feglm</code>, <code>Gam</code>, <code>glm</code> and <code>negbin</code>, p values are computed on the link scale by default unless the <code>type</code> argument is specified explicitly.
</p>
</li>
<li> <p><code>s.value</code>: Shannon information transforms of p values. How many consecutive &quot;heads&quot; tosses would provide the same amount of evidence (or &quot;surprise&quot;) against the null hypothesis that the coin is fair? The purpose of S is to calibrate the analyst's intuition about the strength of evidence encoded in p against a well-known physical phenomenon. See Greenland (2019) and Cole et al. (2020).
</p>
</li>
<li> <p><code>conf.low</code>: lower bound of the confidence interval (or equal-tailed interval for bayesian models)
</p>
</li>
<li> <p><code>conf.high</code>: upper bound of the confidence interval (or equal-tailed interval for bayesian models)
</p>
</li></ul>

<p>See <code>?print.marginaleffects</code> for printing options.
</p>


## Functions


<ul>
<li> <p><code>avg_predictions()</code>: Average predictions
</p>
</li></ul>


## Standard errors using the delta method

<p>Standard errors for all quantities estimated by <code>marginaleffects</code> can be obtained via the delta method. This requires differentiating a function with respect to the coefficients in the model using a finite difference approach. In some models, the delta method standard errors can be sensitive to various aspects of the numeric differentiation strategy, including the step size. By default, the step size is set to <code>1e-8</code>, or to <code>1e-4</code> times the smallest absolute model coefficient, whichever is largest.
</p>
<p><code>marginaleffects</code> can delegate numeric differentiation to the <code>numDeriv</code> package, which allows more flexibility. To do this, users can pass arguments to the <code>numDeriv::jacobian</code> function through a global option. For example:
</p>

<ul>
<li> <p><code>options(marginaleffects_numDeriv = list(method = "simple", method.args = list(eps = 1e-6)))</code>
</p>
</li>
<li> <p><code>options(marginaleffects_numDeriv = list(method = "Richardson", method.args = list(eps = 1e-5)))</code>
</p>
</li>
<li> <p><code>options(marginaleffects_numDeriv = NULL)</code>
</p>
</li></ul>

<p>See the &quot;Standard Errors and Confidence Intervals&quot; vignette on the <code>marginaleffects</code> website for more details on the computation of standard errors:
</p>
<p>https://marginaleffects.com/vignettes/uncertainty.html
</p>
<p>Note that the <code>inferences()</code> function can be used to compute uncertainty estimates using a bootstrap or simulation-based inference. See the vignette:
</p>
<p>https://marginaleffects.com/vignettes/bootstrap.html
</p>


## Model-Specific Arguments

<p>Some model types allow model-specific arguments to modify the nature of
marginal effects, predictions, marginal means, and contrasts. Please report
other package-specific <code>predict()</code> arguments on Github so we can add them to
the table below.
</p>
<p>https://github.com/vincentarelbundock/marginaleffects/issues</p>

<table>
<tr>
 <td style="text-align: left;">
   Package </td><td style="text-align: left;"> Class </td><td style="text-align: left;"> Argument </td><td style="text-align: left;"> Documentation </td>
</tr>
<tr>
 <td style="text-align: left;">
   <code>brms</code> </td><td style="text-align: left;"> <code>brmsfit</code> </td><td style="text-align: left;"> <code>ndraws</code> </td><td style="text-align: left;"> brms::posterior_predict </td>
</tr>
<tr>
 <td style="text-align: left;">
    </td><td style="text-align: left;">  </td><td style="text-align: left;"> <code>re_formula</code> </td><td style="text-align: left;"> brms::posterior_predict </td>
</tr>
<tr>
 <td style="text-align: left;">
   <code>lme4</code> </td><td style="text-align: left;"> <code>merMod</code> </td><td style="text-align: left;"> <code>re.form</code> </td><td style="text-align: left;"> lme4::predict.merMod </td>
</tr>
<tr>
 <td style="text-align: left;">
    </td><td style="text-align: left;">  </td><td style="text-align: left;"> <code>allow.new.levels</code> </td><td style="text-align: left;"> lme4::predict.merMod </td>
</tr>
<tr>
 <td style="text-align: left;">
   <code>glmmTMB</code> </td><td style="text-align: left;"> <code>glmmTMB</code> </td><td style="text-align: left;"> <code>re.form</code> </td><td style="text-align: left;"> glmmTMB::predict.glmmTMB </td>
</tr>
<tr>
 <td style="text-align: left;">
    </td><td style="text-align: left;">  </td><td style="text-align: left;"> <code>allow.new.levels</code> </td><td style="text-align: left;"> glmmTMB::predict.glmmTMB </td>
</tr>
<tr>
 <td style="text-align: left;">
    </td><td style="text-align: left;">  </td><td style="text-align: left;"> <code>zitype</code> </td><td style="text-align: left;"> glmmTMB::predict.glmmTMB </td>
</tr>
<tr>
 <td style="text-align: left;">
   <code>mgcv</code> </td><td style="text-align: left;"> <code>bam</code> </td><td style="text-align: left;"> <code>exclude</code> </td><td style="text-align: left;"> mgcv::predict.bam </td>
</tr>
<tr>
 <td style="text-align: left;">
   <code>robustlmm</code> </td><td style="text-align: left;"> <code>rlmerMod</code> </td><td style="text-align: left;"> <code>re.form</code> </td><td style="text-align: left;"> robustlmm::predict.rlmerMod </td>
</tr>
<tr>
 <td style="text-align: left;">
    </td><td style="text-align: left;">  </td><td style="text-align: left;"> <code>allow.new.levels</code> </td><td style="text-align: left;"> robustlmm::predict.rlmerMod </td>
</tr>
<tr>
 <td style="text-align: left;">
   <code>MCMCglmm</code> </td><td style="text-align: left;"> <code>MCMCglmm</code> </td><td style="text-align: left;"> <code>ndraws</code> </td><td style="text-align: left;">  </td>
</tr>
<tr>
 <td style="text-align: left;">
</td>
</tr>

</table>



## Bayesian posterior summaries

<p>By default, credible intervals in bayesian models are built as equal-tailed
intervals. This can be changed to a highest density interval by setting a global
option:
</p>
<p><code>options("marginaleffects_posterior_interval" = "eti")</code>
</p>
<p><code>options("marginaleffects_posterior_interval" = "hdi")</code>
</p>
<p>By default, the center of the posterior distribution in bayesian models is
identified by the median. Users can use a different summary function by setting a
global option:
</p>
<p><code>options("marginaleffects_posterior_center" = "mean")</code>
</p>
<p><code>options("marginaleffects_posterior_center" = "median")</code>
</p>
<p>When estimates are averaged using the <code>by</code> argument, the <code>tidy()</code> function, or
the <code>summary()</code> function, the posterior distribution is marginalized twice over.
First, we take the average <em>across</em> units but <em>within</em> each iteration of the
MCMC chain, according to what the user requested in <code>by</code> argument or
<code>tidy()/summary()</code> functions. Then, we identify the center of the resulting
posterior using the function supplied to the
<code>"marginaleffects_posterior_center"</code> option (the median by default).
</p>


## Equivalence, Inferiority, Superiority

<p>$\theta$ is an estimate, $\sigma_\theta$ its estimated standard error, and $[a, b]$ are the bounds of the interval supplied to the <code>equivalence</code> argument.
</p>
<p>Non-inferiority:
</p>

<ul>
<li> <p>$H_0$: $\theta \leq a$
</p>
</li>
<li> <p>$H_1$: $\theta > a$
</p>
</li>
<li> <p>$t=(\theta - a)/\sigma_\theta$
</p>
</li>
<li><p> p: Upper-tail probability
</p>
</li></ul>

<p>Non-superiority:
</p>

<ul>
<li> <p>$H_0$: $\theta \geq b$
</p>
</li>
<li> <p>$H_1$: $\theta < b$
</p>
</li>
<li> <p>$t=(\theta - b)/\sigma_\theta$
</p>
</li>
<li><p> p: Lower-tail probability
</p>
</li></ul>

<p>Equivalence: Two One-Sided Tests (TOST)
</p>

<ul>
<li><p> p: Maximum of the non-inferiority and non-superiority p values.
</p>
</li></ul>

<p>Thanks to Russell V. Lenth for the excellent <code>emmeans</code> package and documentation which inspired this feature.
</p>


## Prediction types

<p>The <code>type</code> argument determines the scale of the predictions used to compute quantities of interest with functions from the <code>marginaleffects</code> package. Admissible values for <code>type</code> depend on the model object. When users specify an incorrect value for <code>type</code>, <code>marginaleffects</code> will raise an informative error with a list of valid <code>type</code> values for the specific model object. The first entry in the list in that error message is the default type.
</p>
<p>The <code>invlink(link)</code> is a special type defined by <code>marginaleffects</code>. It is available for some (but not all) models and functions. With this link type, we first compute predictions on the link scale, then we use the inverse link function to backtransform the predictions to the response scale. This is useful for models with non-linear link functions as it can ensure that confidence intervals stay within desirable bounds, ex: 0 to 1 for a logit model. Note that an average of estimates with <code>type="invlink(link)"</code> will not always be equivalent to the average of estimates with <code>type="response"</code>.
</p>
<p>Some of the most common <code>type</code> values are:
</p>
<p>response, link, E, Ep, average, class, conditional, count, cum.prob, cumprob, density, disp, expected, expvalue, fitted, invlink(link), latent, linear.predictor, linpred, location, lp, mean, p, pr, precision, prediction, prob, probability, probs, quantile, risk, scale, survival, unconditional, utility, variance, xb, zero, zlink, zprob
</p>


## References


<ul>
<li><p> Greenland S. 2019. &quot;Valid P-Values Behave Exactly as They Should: Some Misleading Criticisms of P-Values and Their Resolution With S-Values.&quot; The American Statistician. 73(S1): 106–114.
</p>
</li>
<li><p> Cole, Stephen R, Jessie K Edwards, and Sander Greenland. 2020. &quot;Surprise!&quot; American Journal of Epidemiology 190 (2): 191–93. https://doi.org/10.1093/aje/kwaa136
</p>
</li></ul>



## Examples
```{r, warning=FALSE, message=FALSE}
library(marginaleffects)

# Adjusted Prediction for every row of the original dataset
mod <- lm(mpg ~ hp + factor(cyl), data = mtcars)
pred <- predictions(mod)
head(pred)

# Adjusted Predictions at User-Specified Values of the Regressors
predictions(mod, newdata = datagrid(hp = c(100, 120), cyl = 4))

m <- lm(mpg ~ hp + drat + factor(cyl) + factor(am), data = mtcars)
predictions(m, newdata = datagrid(FUN_factor = unique, FUN_numeric = median))

# Average Adjusted Predictions (AAP)
library(dplyr)
mod <- lm(mpg ~ hp * am * vs, mtcars)

avg_predictions(mod)

predictions(mod, by = "am")

# Conditional Adjusted Predictions
plot_predictions(mod, condition = "hp")

# Counterfactual predictions with the `variables` argument
# the `mtcars` dataset has 32 rows

mod <- lm(mpg ~ hp + am, data = mtcars)
p <- predictions(mod)
head(p)
nrow(p)

# average counterfactual predictions
avg_predictions(mod, variables = "am")

# counterfactual predictions obtained by replicating the entire for different
# values of the predictors
p <- predictions(mod, variables = list(hp = c(90, 110)))
nrow(p)


# hypothesis test: is the prediction in the 1st row equal to the prediction in the 2nd row
mod <- lm(mpg ~ wt + drat, data = mtcars)

predictions(
    mod,
    newdata = datagrid(wt = 2:3),
    hypothesis = "b1 = b2")

# same hypothesis test using row indices
predictions(
    mod,
    newdata = datagrid(wt = 2:3),
    hypothesis = "b1 - b2 = 0")

# same hypothesis test using numeric vector of weights
predictions(
    mod,
    newdata = datagrid(wt = 2:3),
    hypothesis = c(1, -1))

# two custom contrasts using a matrix of weights
lc <- matrix(c(
    1, -1,
    2, 3),
    ncol = 2)
predictions(
    mod,
    newdata = datagrid(wt = 2:3),
    hypothesis = lc)


# `by` argument
mod <- lm(mpg ~ hp * am * vs, data = mtcars)
predictions(mod, by = c("am", "vs"))

library(nnet)
nom <- multinom(factor(gear) ~ mpg + am * vs, data = mtcars, trace = FALSE)

# first 5 raw predictions
predictions(nom, type = "probs") |> head()

# average predictions
avg_predictions(nom, type = "probs", by = "group")

by <- data.frame(
    group = c("3", "4", "5"),
    by = c("3,4", "3,4", "5"))

predictions(nom, type = "probs", by = by)

# sum of predicted probabilities for combined response levels
mod <- multinom(factor(cyl) ~ mpg + am, data = mtcars, trace = FALSE)
by <- data.frame(
    by = c("4,6", "4,6", "8"),
    group = as.character(c(4, 6, 8)))
predictions(mod, newdata = "mean", byfun = sum, by = by)



```
