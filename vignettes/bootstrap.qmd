---
format:
  md:
    prefer-html: true
---

# Bootstrap & Simulation


`marginaleffects` offers an `inferences()` function to compute uncertainty estimates using the bootstrap and simulation-based inference.

WARNING: The `inferences()` function is experimental. It may be renamed, the user interface may change, or the functionality may migrate to arguments in other `marginaleffects` functions.

```{r, include = FALSE}
options(width = 1000)
## this vignette is in .Rbuildignore because lme4 is not available on old CRAN
## test machines.

knitr::opts_chunk$set(
  collapse = TRUE,
  fig.width = 9,
  fig.asp = .4,
  out.width = "100%",
  warning = FALSE,
  message = FALSE,
  comment = "#>"
)
```

Consider a simple model:

```{r}
library(marginaleffects)

mod <- lm(Sepal.Length ~ Petal.Width * Petal.Length + factor(Species), data = iris)
```

We will compute uncertainty estimates around the output of `comparisons()`, but note that the same approach works with the `predictions()` and `slopes()` functions as well.


## Delta method

The default strategy to compute standard errors and confidence intervals is the delta method. This is what we obtain by calling:

```{r}
avg_comparisons(mod, by = "Species", variables = "Petal.Width")
```

Since this is the default method, we obtain the same results if we add the `inferences()` call in the chain:

```{r}
avg_comparisons(mod, by = "Species", variables = "Petal.Width") |>
  inferences(method = "delta")
```


## Bootstrap

`marginaleffects` supports three bootstrap frameworks in `R`: the well-established `boot` package, the newer `rsample` package, and the so-called "bayesian bootstrap" in `fwb`.

### `boot`

```{r}
avg_comparisons(mod, by = "Species", variables = "Petal.Width") |>
  inferences(method = "boot")
```

All unknown arguments that we feed to `inferences()` are pushed forward to `boot::boot()`:


```{r}
est <- avg_comparisons(mod, by = "Species", variables = "Petal.Width") |>
  inferences(method = "boot", sim = "balanced", R = 500, conf_type = "bca")
est
```
    
We can extract the original `boot` object from an attribute:


```{r}
attr(est, "inferences")
```

Or we can extract the individual draws with the `posterior_draws()` function:

```{r}
posterior_draws(est) |> head()

posterior_draws(est, shape = "DxP") |> dim()
```


### `rsample`

As before, we can pass arguments to `rsample::bootstraps()` through `inferences()`. For example, for stratified resampling:

```{r, warning = FALSE}
est <- avg_comparisons(mod, by = "Species", variables = "Petal.Width") |>
  inferences(method = "rsample", R = 100, strata = "Species")
est

attr(est, "inferences")
```

Or we can extract the individual draws with the `posterior_draws()` function:

```{r}
posterior_draws(est) |> head()

posterior_draws(est, shape = "PxD") |> dim()
```


### Fractional Weighted Bootstrap (aka Bayesian Bootstrap)

[The `fwb` package](https://ngreifer.github.io/fwb/) implements fractional weighted bootstrap (aka Bayesian bootstrap):

> "fwb implements the fractional weighted bootstrap (FWB), also known as the Bayesian bootstrap, following the treatment by Xu et al. (2020). The FWB involves generating sets of weights from a uniform Dirichlet distribution to be used in estimating statistics of interest, which yields a posterior distribution that can be interpreted in the same way the traditional (resampling-based) bootstrap distribution can be." -Noah Greifer 

The `inferences()` function makes it easy to apply this inference strategy to `marginaleffects` objects:

```{r}
avg_comparisons(mod) |> inferences(method = "fwb")
```


## Simulation-based inference

This simulation-based strategy to compute confidence intervals was described in Krinsky & Robb (1986) and popularized by King, Tomz, Wittenberg (2000). We proceed in 3 steps:

1. Draw `R` sets of simulated coefficients from a multivariate normal distribution with mean equal to the original model's estimated coefficients and variance equal to the model's variance-covariance matrix (classical, "HC3", or other).
2. Use the `R` sets of coefficients to compute `R` sets of estimands: predictions, comparisons, or slopes.
3. Take quantiles of the resulting distribution of estimands to obtain a confidence interval and the standard deviation of simulated estimates to estimate the standard error.

Here are a few examples:

```{r, warning = FALSE}
library(ggplot2)
library(ggdist)

avg_comparisons(mod, by = "Species", variables = "Petal.Width") |>
  inferences(method = "simulation")
```

Since simulation based inference generates `R` estimates of the quantities of interest, we can treat them similarly to draws from the posterior distribution in bayesian models. For example, we can extract draws using the `posterior_draws()` function, and plot their distributions using packages like`ggplot2` and `ggdist`:

```{r}
avg_comparisons(mod, by = "Species", variables = "Petal.Width") |>
  inferences(method = "simulation") |>
  posterior_draws("rvar") |>
  ggplot(aes(y = Species, xdist = rvar)) +
  stat_slabinterval()
```


## Multiple imputation and missing data

The same workflow and the same `inferences` function can be used to estimate models with multiple imputation for missing data.
